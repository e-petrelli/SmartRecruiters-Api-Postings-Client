/*
 * Posting API - version 1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.users;

import com.smartrecruiters.api.users.invoker.ApiCallback;
import com.smartrecruiters.api.users.invoker.ApiClient;
import com.smartrecruiters.api.users.invoker.ApiException;
import com.smartrecruiters.api.users.invoker.ApiResponse;
import com.smartrecruiters.api.users.invoker.Configuration;
import com.smartrecruiters.api.users.invoker.Pair;
import com.smartrecruiters.api.users.invoker.ProgressRequestBody;
import com.smartrecruiters.api.users.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.users.model.Departments;
import com.smartrecruiters.api.users.model.JobAdLanguageCode;
import com.smartrecruiters.api.users.model.Posting;
import com.smartrecruiters.api.users.model.PostingList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostingsApi {
    private ApiClient localVarApiClient;

    public PostingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1GetPosting
     * @param companyIdentifier Identifier of a company (required)
     * @param postingId Posting identifier (required)
     * @param acceptLanguage Language of translation (optional)
     * @param sourceTypeId sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**. (optional)
     * @param sourceId sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1GetPostingCall(String companyIdentifier, String postingId, JobAdLanguageCode acceptLanguage, String sourceTypeId, String sourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-v1/companies/{companyIdentifier}/postings/{postingId}"
            .replaceAll("\\{" + "companyIdentifier" + "\\}", localVarApiClient.escapeString(companyIdentifier.toString()))
            .replaceAll("\\{" + "postingId" + "\\}", localVarApiClient.escapeString(postingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceTypeId", sourceTypeId));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("accept-language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1GetPostingValidateBeforeCall(String companyIdentifier, String postingId, JobAdLanguageCode acceptLanguage, String sourceTypeId, String sourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyIdentifier' is set
        if (companyIdentifier == null) {
            throw new ApiException("Missing the required parameter 'companyIdentifier' when calling v1GetPosting(Async)");
        }
        
        // verify the required parameter 'postingId' is set
        if (postingId == null) {
            throw new ApiException("Missing the required parameter 'postingId' when calling v1GetPosting(Async)");
        }
        

        okhttp3.Call localVarCall = v1GetPostingCall(companyIdentifier, postingId, acceptLanguage, sourceTypeId, sourceId, _callback);
        return localVarCall;

    }

    /**
     * Get posting by posting id for given company
     * Note: In order to update content of a job posting available via the Posting API, you need to re-post the job in SmartRecruiters application.
     * @param companyIdentifier Identifier of a company (required)
     * @param postingId Posting identifier (required)
     * @param acceptLanguage Language of translation (optional)
     * @param sourceTypeId sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**. (optional)
     * @param sourceId sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**. (optional)
     * @return Posting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Posting v1GetPosting(String companyIdentifier, String postingId, JobAdLanguageCode acceptLanguage, String sourceTypeId, String sourceId) throws ApiException {
        ApiResponse<Posting> localVarResp = v1GetPostingWithHttpInfo(companyIdentifier, postingId, acceptLanguage, sourceTypeId, sourceId);
        return localVarResp.getData();
    }

    /**
     * Get posting by posting id for given company
     * Note: In order to update content of a job posting available via the Posting API, you need to re-post the job in SmartRecruiters application.
     * @param companyIdentifier Identifier of a company (required)
     * @param postingId Posting identifier (required)
     * @param acceptLanguage Language of translation (optional)
     * @param sourceTypeId sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**. (optional)
     * @param sourceId sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**. (optional)
     * @return ApiResponse&lt;Posting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Posting> v1GetPostingWithHttpInfo(String companyIdentifier, String postingId, JobAdLanguageCode acceptLanguage, String sourceTypeId, String sourceId) throws ApiException {
        okhttp3.Call localVarCall = v1GetPostingValidateBeforeCall(companyIdentifier, postingId, acceptLanguage, sourceTypeId, sourceId, null);
        Type localVarReturnType = new TypeToken<Posting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get posting by posting id for given company (asynchronously)
     * Note: In order to update content of a job posting available via the Posting API, you need to re-post the job in SmartRecruiters application.
     * @param companyIdentifier Identifier of a company (required)
     * @param postingId Posting identifier (required)
     * @param acceptLanguage Language of translation (optional)
     * @param sourceTypeId sourceTypeId can be retrieved using [get /configuration/sources](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSourceTypes) endpoint. Used together with **sourceId** to add source tracking parameter to **applyUrl**. (optional)
     * @param sourceId sourceId can be retrieved using [get /configuration/sources/{sourceType}/values](https://dev.smartrecruiters.com/customer-api/live-docs/#!/configuration/configuration_getSources) endpoint. Used together with **sourceTypeId** to add source tracking parameter to **applyUrl**. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1GetPostingAsync(String companyIdentifier, String postingId, JobAdLanguageCode acceptLanguage, String sourceTypeId, String sourceId, final ApiCallback<Posting> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1GetPostingValidateBeforeCall(companyIdentifier, postingId, acceptLanguage, sourceTypeId, sourceId, _callback);
        Type localVarReturnType = new TypeToken<Posting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ListDepartments
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ListDepartmentsCall(String companyIdentifier, JobAdLanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyIdentifier}/departments"
            .replaceAll("\\{" + "companyIdentifier" + "\\}", localVarApiClient.escapeString(companyIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("accept-language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ListDepartmentsValidateBeforeCall(String companyIdentifier, JobAdLanguageCode acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyIdentifier' is set
        if (companyIdentifier == null) {
            throw new ApiException("Missing the required parameter 'companyIdentifier' when calling v1ListDepartments(Async)");
        }
        

        okhttp3.Call localVarCall = v1ListDepartmentsCall(companyIdentifier, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * List departments for given company
     * List departments for given company.
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @return Departments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Departments v1ListDepartments(String companyIdentifier, JobAdLanguageCode acceptLanguage) throws ApiException {
        ApiResponse<Departments> localVarResp = v1ListDepartmentsWithHttpInfo(companyIdentifier, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * List departments for given company
     * List departments for given company.
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @return ApiResponse&lt;Departments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Departments> v1ListDepartmentsWithHttpInfo(String companyIdentifier, JobAdLanguageCode acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = v1ListDepartmentsValidateBeforeCall(companyIdentifier, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Departments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List departments for given company (asynchronously)
     * List departments for given company.
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ListDepartmentsAsync(String companyIdentifier, JobAdLanguageCode acceptLanguage, final ApiCallback<Departments> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ListDepartmentsValidateBeforeCall(companyIdentifier, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Departments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ListPostings
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param q full-text search query based on a job title, location (optional)
     * @param limit number of elements to return. max value is 100 (optional)
     * @param offset number of elements to skip while processing result (optional)
     * @param destination Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned. NOTE: when selected, all postings, internal and public, will be treated as internal. Among other things, this means that screening questions will not be displayed, and candidates will be marked with the EMPLOYEE label.  (optional)
     * @param country country code filter (part of the location object) (optional)
     * @param region region filter (part of the location object) (optional)
     * @param city city filter (part of the location object) (optional)
     * @param department department filter (department id) (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;pt-PT\&quot; - \&quot;Portugal - português (Portugal)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ListPostingsCall(String companyIdentifier, JobAdLanguageCode acceptLanguage, String q, Integer limit, Integer offset, String destination, String country, String region, String city, String department, List<JobAdLanguageCode> language, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyIdentifier}/postings"
            .replaceAll("\\{" + "companyIdentifier" + "\\}", localVarApiClient.escapeString(companyIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language", language));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("accept-language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ListPostingsValidateBeforeCall(String companyIdentifier, JobAdLanguageCode acceptLanguage, String q, Integer limit, Integer offset, String destination, String country, String region, String city, String department, List<JobAdLanguageCode> language, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyIdentifier' is set
        if (companyIdentifier == null) {
            throw new ApiException("Missing the required parameter 'companyIdentifier' when calling v1ListPostings(Async)");
        }
        

        okhttp3.Call localVarCall = v1ListPostingsCall(companyIdentifier, acceptLanguage, q, limit, offset, destination, country, region, city, department, language, _callback);
        return localVarCall;

    }

    /**
     * Lists active postings published by given company
     * Lists active postings published by given company. Return PostingList
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param q full-text search query based on a job title, location (optional)
     * @param limit number of elements to return. max value is 100 (optional)
     * @param offset number of elements to skip while processing result (optional)
     * @param destination Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned. NOTE: when selected, all postings, internal and public, will be treated as internal. Among other things, this means that screening questions will not be displayed, and candidates will be marked with the EMPLOYEE label.  (optional)
     * @param country country code filter (part of the location object) (optional)
     * @param region region filter (part of the location object) (optional)
     * @param city city filter (part of the location object) (optional)
     * @param department department filter (department id) (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;pt-PT\&quot; - \&quot;Portugal - português (Portugal)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;  (optional)
     * @return PostingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PostingList v1ListPostings(String companyIdentifier, JobAdLanguageCode acceptLanguage, String q, Integer limit, Integer offset, String destination, String country, String region, String city, String department, List<JobAdLanguageCode> language) throws ApiException {
        ApiResponse<PostingList> localVarResp = v1ListPostingsWithHttpInfo(companyIdentifier, acceptLanguage, q, limit, offset, destination, country, region, city, department, language);
        return localVarResp.getData();
    }

    /**
     * Lists active postings published by given company
     * Lists active postings published by given company. Return PostingList
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param q full-text search query based on a job title, location (optional)
     * @param limit number of elements to return. max value is 100 (optional)
     * @param offset number of elements to skip while processing result (optional)
     * @param destination Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned. NOTE: when selected, all postings, internal and public, will be treated as internal. Among other things, this means that screening questions will not be displayed, and candidates will be marked with the EMPLOYEE label.  (optional)
     * @param country country code filter (part of the location object) (optional)
     * @param region region filter (part of the location object) (optional)
     * @param city city filter (part of the location object) (optional)
     * @param department department filter (department id) (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;pt-PT\&quot; - \&quot;Portugal - português (Portugal)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;  (optional)
     * @return ApiResponse&lt;PostingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostingList> v1ListPostingsWithHttpInfo(String companyIdentifier, JobAdLanguageCode acceptLanguage, String q, Integer limit, Integer offset, String destination, String country, String region, String city, String department, List<JobAdLanguageCode> language) throws ApiException {
        okhttp3.Call localVarCall = v1ListPostingsValidateBeforeCall(companyIdentifier, acceptLanguage, q, limit, offset, destination, country, region, city, department, language, null);
        Type localVarReturnType = new TypeToken<PostingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists active postings published by given company (asynchronously)
     * Lists active postings published by given company. Return PostingList
     * @param companyIdentifier Identifier of a company (required)
     * @param acceptLanguage Language of translation (optional)
     * @param q full-text search query based on a job title, location (optional)
     * @param limit number of elements to return. max value is 100 (optional)
     * @param offset number of elements to skip while processing result (optional)
     * @param destination Filter indicating which postings to return: * **PUBLIC**: response will include ONLY public postings * **INTERNAL**: response will include ONLY internal postings * **INTERNAL_OR_PUBLIC**: response will include internal postings or public postings, but not both for a single job. If a job has both types of postings, only internal postings will be returned. NOTE: when selected, all postings, internal and public, will be treated as internal. Among other things, this means that screening questions will not be displayed, and candidates will be marked with the EMPLOYEE label.  (optional)
     * @param country country code filter (part of the location object) (optional)
     * @param region region filter (part of the location object) (optional)
     * @param city city filter (part of the location object) (optional)
     * @param department department filter (department id) (optional)
     * @param language Exceptions to the language code ISO format: * \&quot;en-GB\&quot; - \&quot;English - English (UK)\&quot; * \&quot;fr-CA\&quot; - \&quot;French - français (Canada)\&quot; * \&quot;pt-BR\&quot; - \&quot;Portugal - português (Brasil)\&quot; * \&quot;pt-PT\&quot; - \&quot;Portugal - português (Portugal)\&quot; * \&quot;zh-TW\&quot; - \&quot;Chinese (Traditional) - 中文 (香港)\&quot; * \&quot;zh-CN\&quot; - \&quot;Chinese (Simplified) - 中文 (简体)\&quot;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ListPostingsAsync(String companyIdentifier, JobAdLanguageCode acceptLanguage, String q, Integer limit, Integer offset, String destination, String country, String region, String city, String department, List<JobAdLanguageCode> language, final ApiCallback<PostingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ListPostingsValidateBeforeCall(companyIdentifier, acceptLanguage, q, limit, offset, destination, country, region, city, department, language, _callback);
        Type localVarReturnType = new TypeToken<PostingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
